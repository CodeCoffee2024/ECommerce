using System.ComponentModel;

using ClosedXML.Excel;
using ECommerce.Application.Abstractions;
using iText.Kernel.Pdf;
using iText.Kernel.Pdf.Canvas;
using iText.Layout;
using iText.Layout.Element;
using iText.Layout.Properties;
using Microsoft.AspNetCore.Http;

namespace ECommerce.Infrastructure.Services
{
    public class ExportService : IExportService
    {
        #region Public Methods

        private readonly IHttpContextAccessor _httpContextAccessor;

        public ExportService(IHttpContextAccessor httpContextAccessor)
        {
            _httpContextAccessor = httpContextAccessor;
        }

        private string ReportName { get; set; }
        private Dictionary<string, string> Filters { get; set; }

        public async Task<byte[]> ExportAsync(List<object> data, string exportType, string reportName, Dictionary<string, string> filters)
        {
            ReportName = reportName;
            Filters = filters;
            return exportType.ToLower() switch
            {
                "pdf" => GeneratePdf(data),
                _ => GenerateExcel(data), // Default to Excel
            };
        }

        #endregion Public Methods

        #region Private Methods

        private byte[] GeneratePdf(List<object> data)
        {
            if (!data.Any())
                throw new InvalidOperationException("No data available for export.");

            using var stream = new MemoryStream();
            using var writer = new PdfWriter(stream);
            using var pdf = new PdfDocument(writer);
            pdf.SetDefaultPageSize(iText.Kernel.Geom.PageSize.A4.Rotate()); // Landscape mode
            var document = new Document(pdf);
            document.SetMargins(20, 20, 20, 20); // 🔧 Less margin on left & right

            var boldFont = iText.Kernel.Font.PdfFontFactory.CreateFont(iText.IO.Font.Constants.StandardFonts.HELVETICA_BOLD);

            // ✅ Header Section
            document.Add(new Paragraph("Company Name: MyCompany Inc.").SetFont(boldFont).SetFontSize(14));
            document.Add(new Paragraph(ReportName));// Add filters section
            foreach (var filter in Filters)
            {
                if (filter.Value != string.Empty)
                {
                    document.Add(new Paragraph($"{filter.Key}: {filter.Value}")
                        .SetFontSize(12));
                }
            }

            document.Add(new Paragraph("\n")); // Add spacing before table

            // ✅ Table Setup (100% width)
            var properties = data.First().GetType().GetProperties();
            var headers = properties.Select(prop =>
                prop.GetCustomAttributes(typeof(DescriptionAttribute), false)
                    .Cast<DescriptionAttribute>()
                    .FirstOrDefault()?.Description ?? prop.Name
            ).ToArray();
            var table = new Table(headers.Length)
                .SetWidth(UnitValue.CreatePercentValue(100)) // ✅ Table takes full width
                .SetHorizontalAlignment(iText.Layout.Properties.HorizontalAlignment.CENTER)
                .SetTextAlignment(iText.Layout.Properties.TextAlignment.LEFT);

            // ✅ Add Headers
            foreach (var header in headers)
            {
                table.AddHeaderCell(new Cell().Add(new Paragraph(header).SetFont(boldFont).SetTextAlignment(iText.Layout.Properties.TextAlignment.CENTER)));
            }

            // ✅ Add Data Rows (Stretching text)
            foreach (var item in data)
            {
                foreach (var prop in properties)
                {
                    table.AddCell(new Cell().Add(new Paragraph(prop.GetValue(item)?.ToString() ?? "").SetTextAlignment(iText.Layout.Properties.TextAlignment.LEFT)));
                }
            }

            document.Add(table);
            document.Flush(); // Ensure table content is written

            // ✅ Add Footer **Manually on the Last Page**
            PdfPage lastPage = pdf.GetLastPage();
            PdfCanvas canvas = new PdfCanvas(lastPage);
            float width = pdf.GetDefaultPageSize().GetWidth();
            float height = 30; // Footer height position

            new Canvas(canvas, new iText.Kernel.Geom.Rectangle(40, height, width - 80, 30))
                .Add(new Paragraph($"Generated By: " + GetCurrentUser()).SetFontSize(10));

            new Canvas(canvas, new iText.Kernel.Geom.Rectangle(width / 2 - 30, height, 60, 30))
                .Add(new Paragraph($"Page {pdf.GetNumberOfPages()}").SetFontSize(10));

            new Canvas(canvas, new iText.Kernel.Geom.Rectangle(width - 200, height, 200, 30))
                .Add(new Paragraph($"Generated on: {DateTime.Now:yyyy-MM-dd hh:mm tt}").SetFontSize(10));

            document.Close();
            return stream.ToArray();
        }

        private byte[] GenerateExcel(List<object> data)
        {
            if (!data.Any())
                throw new InvalidOperationException("No data available for export.");

            using var workbook = new XLWorkbook();
            var worksheet = workbook.Worksheets.Add(ReportName);

            var properties = data.First().GetType().GetProperties();

            // Get descriptions (fallback to property name if no description)
            var headers = properties.Select(prop =>
                prop.GetCustomAttributes(typeof(DescriptionAttribute), false)
                    .Cast<DescriptionAttribute>()
                    .FirstOrDefault()?.Description ?? prop.Name
            ).ToArray();

            // Retrieve current user from claims
            string generatedBy = GetCurrentUser();

            // Add metadata at the top
            int currRow = 1; // Track row position for inserting metadata
            worksheet.Cell(currRow++, 1).Value = "Company Name: MyCompany Inc.";
            worksheet.Cell(currRow++, 1).Value = $"Report Generated:  {DateTime.Now:yyyy-MM-dd hh:mm tt}";
            worksheet.Cell(currRow++, 1).Value = "Generated By: " + generatedBy;

            // List each filter properly in separate rows
            foreach (var filter in Filters)
            {
                if (!string.IsNullOrEmpty(filter.Value))
                {
                    worksheet.Cell(currRow++, 1).Value = $"{filter.Key}: {filter.Value}";
                }
            }

            // Leave one empty row before headers for better readability
            currRow++;

            // Add headers
            for (int col = 0; col < headers.Length; col++)
            {
                var headerCell = worksheet.Cell(currRow, col + 1);
                headerCell.Value = headers[col];
                headerCell.Style.Font.Bold = true;
                headerCell.Style.Fill.BackgroundColor = XLColor.LightGray; // Better visibility
            }

            currRow++; // Move to data rows

            // Add data rows
            for (int row = 0; row < data.Count; row++)
            {
                for (int col = 0; col < properties.Length; col++)
                {
                    worksheet.Cell(row + currRow, col + 1).Value = properties[col].GetValue(data[row])?.ToString() ?? "";
                }
            }

            // Adjust column width **after** adding data for best fit
            worksheet.Columns().AdjustToContents();

            // Ensure proper memory handling for file output
            using var stream = new MemoryStream();
            workbook.SaveAs(stream);
            return stream.ToArray();
        }

        private string GetCurrentUser()
        {
            var user = _httpContextAccessor.HttpContext?.User;
            if (user == null) return "Unknown";

            // Try fetching name from custom UserId claim
            string name = user.Claims.FirstOrDefault(c => c.Type == "UserName")?.Value;

            return name ?? "Unknown";
        }

        #endregion Private Methods
    }
}